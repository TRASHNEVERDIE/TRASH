-- Encoded Script (Base64 Loader)
local encoded = [[
Ci0tIEFudGktRGVjb21waWxlciBXcmFwcGVyCnBjYWxsKGZ1bmN0aW9uKCkKICAgIGlmIGhvb2tmdW5jdGlvbiB0aGVuCiAgICAgICAgbG9jYWwgbXQgPSBnZXRyYXdtZXRhdGFibGUoZ2FtZSkKICAgICAgICBzZXRyZWFkb25seShtdCwgZmFsc2UpCiAgICAgICAgbG9jYWwgb2xkID0gbXQuX19uYW1lY2FsbAogICAgICAgIG10Ll9fbmFtZWNhbGwgPSBuZXdjY2xvc3VyZShmdW5jdGlvbihzZWxmLCAuLi4pCiAgICAgICAgICAgIGxvY2FsIG1ldGhvZCA9IGdldG5hbWVjYWxsbWV0aG9kKCkKICAgICAgICAgICAgaWYgdG9zdHJpbmcoc2VsZik6bG93ZXIoKTpmaW5kKCJodHRwIikgdGhlbiByZXR1cm4gbmlsIGVuZAogICAgICAgICAgICByZXR1cm4gb2xkKHNlbGYsIC4uLikKICAgICAgICBlbmQpCiAgICBlbmQKZW5kKQoKLS0gQW50aSBFbnZpcm9ubWVudCBMZWFrCmdldGZlbnYsIHNldGZlbnYsIGdldHJlZywgZ2V0Z2MsIGdldGdlbnYgPSBuaWwsIG5pbCwgbmlsLCBuaWwsIG5pbAoKLS0gRGV0ZWN0IGV4ZWN1dG9yIHNwb29mCmlmIG5vdCAoaWRlbnRpZnlleGVjdXRvciBvciBpc19zeW5hcHNlX2Z1bmN0aW9uKSB0aGVuCiAgICBlcnJvcigiVW5hdXRob3JpemVkIGV4ZWN1dG9yLiIpCmVuZAoKLS0gQW50aSBkZWJ1ZyB0YW1wZXIKaWYgZGVidWcgYW5kIGRlYnVnLmdldGluZm8gYW5kIGRlYnVnLmdldGluZm8oMSkud2hhdCA9PSAiQyIgdGhlbgogICAgZXJyb3IoIkRlYnVnIHRvb2wgZGV0ZWN0ZWQuIikKZW5kCgotLSBUUkFTSE5FVkVSRElFIEdVSSBTY3JpcHQKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIHBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgUGxheWVyR3VpID0gcGxheWVyOldhaXRGb3JDaGlsZCgiUGxheWVyR3VpIikKCmxvY2FsIHNjcmVlbkd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKc2NyZWVuR3VpLk5hbWUgPSAiVFJBU0hORVZFUkRJRSIKc2NyZWVuR3VpLlJlc2V0T25TcGF3biA9IGZhbHNlCnNjcmVlbkd1aS5QYXJlbnQgPSBQbGF5ZXJHdWkKCmxvY2FsIG1lbnVGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQptZW51RnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCAyNTAsIDAsIDQwMCkKbWVudUZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIwLCAwLjUsIC0yMDApCm1lbnVGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTAwLCAwLCAxNTApCm1lbnVGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCm1lbnVGcmFtZS5BY3RpdmUgPSB0cnVlCm1lbnVGcmFtZS5EcmFnZ2FibGUgPSB0cnVlCm1lbnVGcmFtZS5QYXJlbnQgPSBzY3JlZW5HdWkKCmxvY2FsIHRpdGxlTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCnRpdGxlTGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMzUsIDAsIDUwKQp0aXRsZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIDApCnRpdGxlTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKdGl0bGVMYWJlbC5UZXh0ID0gIlRSQVNITkVWRVJESUUiCnRpdGxlTGFiZWwuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAp0aXRsZUxhYmVsLlRleHRTaXplID0gMjQKdGl0bGVMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKdGl0bGVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAp0aXRsZUxhYmVsLlBhcmVudCA9IG1lbnVGcmFtZQoKbG9jYWwgdG9nZ2xlQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKdG9nZ2xlQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzAsIDAsIDMwKQp0b2dnbGVCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTM1LCAwLCAxMCkKdG9nZ2xlQnV0dG9uLlRleHQgPSAiKyIKdG9nZ2xlQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKdG9nZ2xlQnV0dG9uLlRleHRTaXplID0gMjAKdG9nZ2xlQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDAsIDIwMCkKdG9nZ2xlQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQp0b2dnbGVCdXR0b24uUGFyZW50ID0gbWVudUZyYW1lCgpsb2NhbCBjb250ZW50RnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKY29udGVudEZyYW1lLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgLTUwKQpjb250ZW50RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgNTApCmNvbnRlbnRGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpjb250ZW50RnJhbWUuTmFtZSA9ICJDb250ZW50Igpjb250ZW50RnJhbWUuUGFyZW50ID0gbWVudUZyYW1lCgpsb2NhbCBpc01pbmltaXplZCA9IGZhbHNlCmxvY2FsIGZ1bmN0aW9uIHVwZGF0ZU1pbmltaXplU3RhdGUoKQogICAgY29udGVudEZyYW1lLlZpc2libGUgPSBub3QgaXNNaW5pbWl6ZWQKICAgIHRvZ2dsZUJ1dHRvbi5UZXh0ID0gaXNNaW5pbWl6ZWQgYW5kICIrIiBvciAiLSIKICAgIG1lbnVGcmFtZS5TaXplID0gaXNNaW5pbWl6ZWQgYW5kIFVEaW0yLm5ldygwLCAyNTAsIDAsIDUwKSBvciBVRGltMi5uZXcoMCwgMjUwLCAwLCA0MDApCmVuZAp0b2dnbGVCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBpc01pbmltaXplZCA9IG5vdCBpc01pbmltaXplZAogICAgdXBkYXRlTWluaW1pemVTdGF0ZSgpCmVuZCkKdXBkYXRlTWluaW1pemVTdGF0ZSgpCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVUb2dnbGVCdXR0b24odGV4dCwgeU9mZnNldCwgY2FsbGJhY2spCiAgICBsb2NhbCB0b2dnbGVkID0gZmFsc2UKICAgIGxvY2FsIGJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICBidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDQwKQogICAgYnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDEwLCAwLCB5T2Zmc2V0KQogICAgYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig2MCwgNjAsIDYwKQogICAgYnV0dG9uLlRleHQgPSB0ZXh0CiAgICBidXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zCiAgICBidXR0b24uVGV4dFNpemUgPSAxOAogICAgYnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgYnV0dG9uLlBhcmVudCA9IGNvbnRlbnRGcmFtZQoKICAgIGxvY2FsIHJ1bm5pbmcgPSBmYWxzZQogICAgYnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIHRvZ2dsZWQgPSBub3QgdG9nZ2xlZAogICAgICAgIGJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gdG9nZ2xlZCBhbmQgQ29sb3IzLmZyb21SR0IoMjAwLCAwLCAwKSBvciBDb2xvcjMuZnJvbVJHQig2MCwgNjAsIDYwKQogICAgICAgIGlmIHRvZ2dsZWQgdGhlbgogICAgICAgICAgICBydW5uaW5nID0gdHJ1ZQogICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZwogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBydW5uaW5nID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpsb2NhbCByZW1vdGUgPSBnYW1lLlJlcGxpY2F0ZWRTdG9yYWdlLk1zZwoKY3JlYXRlVG9nZ2xlQnV0dG9uKCJBVVRPIEZJU0hJTkciLCAxMCwgZnVuY3Rpb24oYWN0aXZlKQogICAgd2hpbGUgYWN0aXZlKCkgZG8KICAgICAgICByZW1vdGUuUmVtb3RlRnVuY3Rpb246SW52b2tlU2VydmVyKCLoo4XlpIfljbjovb3psbznq78iKQogICAgICAgIHdhaXQoMSkKICAgICAgICByZW1vdGUuUmVtb3RlRnVuY3Rpb246SW52b2tlU2VydmVyKCLmipvnq78iLCBWZWN0b3IzLm5ldygtMC4zNywgMC4wMCwgMC45MykpCiAgICAgICAgd2FpdCgxKQogICAgICAgIGZvciBpID0gMSwgMTAgZG8KICAgICAgICAgICAgcmVtb3RlLlJlbW90ZUV2ZW50OkZpcmVTZXJ2ZXIoIuaRh+aZg+mxvOervyIpCiAgICAgICAgICAgIHdhaXQoMC4xKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmNyZWF0ZVRvZ2dsZUJ1dHRvbigiQVVUTyBDTEFJTSBTSEFSSyBHVVkiLCA2MCwgZnVuY3Rpb24oYWN0aXZlKQogICAgd2hpbGUgYWN0aXZlKCkgZG8KICAgICAgICByZW1vdGUuUmVtb3RlRXZlbnQ6RmlyZVNlcnZlcigi5pS26ZuGbnBj6ZKT55qE6bG8IiwgMSkKICAgICAgICB3YWl0KDEwKQogICAgZW5kCmVuZCkKCmNyZWF0ZVRvZ2dsZUJ1dHRvbigiQVVUTyBDTEFJTSBESVZFUiIsIDExMCwgZnVuY3Rpb24oYWN0aXZlKQogICAgd2hpbGUgYWN0aXZlKCkgZG8KICAgICAgICByZW1vdGUuUmVtb3RlRXZlbnQ6RmlyZVNlcnZlcigi5pS26ZuGbnBj6ZKT55qE6bG8IiwgMikKICAgICAgICB3YWl0KDEwKQogICAgZW5kCmVuZCkKCmNyZWF0ZVRvZ2dsZUJ1dHRvbigiQVVUTyBDTEFJTSBQRU5HVUlOIiwgMTYwLCBmdW5jdGlvbihhY3RpdmUpCiAgICB3aGlsZSBhY3RpdmUoKSBkbwogICAgICAgIHJlbW90ZS5SZW1vdGVFdmVudDpGaXJlU2VydmVyKCLmlLbpm4ZucGPpkpPnmoTpsbwiLCAzKQogICAgICAgIHdhaXQoMTApCiAgICBlbmQKZW5kKQoKY3JlYXRlVG9nZ2xlQnV0dG9uKCJBVVRPIENMQUlNIEtJTkcgT1NDQVIiLCAyMTAsIGZ1bmN0aW9uKGFjdGl2ZSkKICAgIHdoaWxlIGFjdGl2ZSgpIGRvCiAgICAgICAgcmVtb3RlLlJlbW90ZUV2ZW50OkZpcmVTZXJ2ZXIoIuaUtumbhm5wY+mSk+eahOmxvCIsIDQpCiAgICAgICAgd2FpdCgxMCkKICAgIGVuZAplbmQpCgpjcmVhdGVUb2dnbGVCdXR0b24oIkFVVE8gU0VMTCBGSVNIIiwgMjYwLCBmdW5jdGlvbihhY3RpdmUpCiAgICB3aGlsZSBhY3RpdmUoKSBkbwogICAgICAgIHJlbW90ZS5SZW1vdGVFdmVudDpGaXJlU2VydmVyKCLljZbpsbwiKQogICAgICAgIHdhaXQoMzApCiAgICBlbmQKZW5kKQo=
]]

-- Decode Base64
local function b64decode(data)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

-- Execute Decoded Code
local success, result = pcall(function()
    loadstring(b64decode(encoded))()
end)
if not success then
    warn("Error decoding script:", result)
end
